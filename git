os.loadAPI("lib/json")

local function git_get(sUser, sRepo, sDir, sDestination)
  local res = http.get("https://api.github.com/repos/"..sUser.."/"..sRepo.."/contents/"..sDir)
  if not res then
    error("HTTP failure")
  end
  local sRes = res.readAll()
  if sRes then
    local obj = json.decode(sRes)
    for i=1, #obj do
      local f = obj[i]
      if f.type=="file" then
        print(sDir.."/"..f.name.." > "..sDestination.."/"..f.name.."...")
        local sRes2 = http.get(f.download_url).readAll()
        if sRes2 then
          local f = fs.open(sDestination.."/"..f.name, "w")
          f.write(sRes2)
          f.close()
        else
          error("HTTP failure")
        end
      elseif f.type=="dir" then
        git_get(sUser, sRepo, sDir.."/"..f.name, sDestination.."/"..f.name)
      end
    end
  else
    error("HTTP failure")
  end
end

local function git_clone(sUrl, sDestination)
  local sDestination = sDestination:gsub("(.-)/*$", "%1") -- Remove trailing '/'
  local user, repo = string.gmatch(sUrl, "https?://github%.com/([^/]-)/([^/]-)%.git")()
  if not user or not repo then
    user, repo = string.gmatch(sUrl, "https?://github%.com/([^/]-)/([^/]-)")()
    if not user or not repo then
      error("Invalid github clone url")
    end
  end
  local f = fs.open(shell.dir().."/.ccgit", "w")
  f.write(sUrl)
  f.close()
  git_get(user, repo, "", sDestination)
end

local arg = {...}

if arg[1]=="clone" then
  
  if arg[2]==nil then
    print("Usage: "..shell.getRunningProgram().." clone url [path]")
    return
  end
  git_clone(arg[2], arg[3] or shell.dir())
  
elseif arg[1]=="pull" then

  if not fs.exists(shell.dir().."/.ccgit") then
    print("Not a valid git repository")
    return
  end
  local f = fs.open(shell.dir().."/.ccgit", "r")
  git_clone(f.read(), shell.dir())
  f.close()

end
